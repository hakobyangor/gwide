generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                = "node node_modules/prisma-nestjs-graphql"
  output                  = "../../../generated/db-types/src"
  purgeOutput             = false
  combineScalarFilters    = true
  emitSingle              = true
  noAtomicOperations      = true
  // field validator
  fields_Validator_input  = true
  fields_Validator_output = true
  fields_Validator_model  = true
  fields_Validator_from   = "class-validator"
  // Args where|data nested validator
  decorate_1_type         = "*Args"
  decorate_1_field        = "@(data|where)"
  decorate_1_name         = ValidateNested
  decorate_1_from         = "class-validator"
  decorate_1_arguments    = "['{ each: true }']"
}

enum UserRole {
  USER
  ADMIN
  GUIDE
}

enum Status {
  ACTIVE
  PENDING
  DRAFT
  INACTIVE
  BLOCKED
}

enum BookingStatus {
  ACTIVE
  PENDING
  DRAFT
  APPROVED
  REJECTED
  CENCELLED
}

enum YesNo {
  YES
  NO
}

enum TourType {
  INDIVIDUAL
  GROUP
}

enum TourFormat {
  ON_FOOT
  BY_CAR
}

model User {
  id Int @id @default(autoincrement())

  /// @Validator.IsNotEmpty()
  /// @Validator.IsEmail()
  email String @unique

  /// @Validator.IsNotEmpty()
  /// @Validator.IsString()
  /// @Validator.MaxLength(100)
  /// @Validator.MinLength(2)
  firstName String

  /// @Validator.IsNotEmpty()
  /// @Validator.IsString()
  /// @Validator.MaxLength(100)
  /// @Validator.MinLength(2)
  lastName String

  /// @Validator.IsNotEmpty()
  /// @Validator.IsString()
  /// @Validator.MaxLength(100)
  /// @Validator.MinLength(8)
  /// @Validator.Matches(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]+$/, {message: 'password too weak'})
  /// @HideField()
  password String

  /// @Validator.IsString()
  status Status @default(PENDING)

  /// @Validator.IsString()
  image String?

  country   Country? @relation(fields: [countryId], references: [id])
  countryId Int?

  /// @Validator.IsString()
  role UserRole

  /// @Validator.IsString()
  bio String?

  /// @Validator.IsString()
  hash String?

  hashExpiredAt DateTime?

  rating Float? @default(5)

  isVerified YesNo @default(NO)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tour       Tour[]
  tourReview TourReview[]
  booking    Booking[]
}

model Tour {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name String

  /// @Validator.IsString()
  description String

  /// @Validator.IsString()
  status Status @default(ACTIVE)

  type TourType @default(INDIVIDUAL)

  format TourFormat @default(ON_FOOT)

  image            String
  guide            User               @relation(fields: [guideId], references: [id])
  guideId          Int
  currency         Currency           @relation(fields: [currencyId], references: [id])
  currencyId       Int
  maxCapacity      Int
  rating           Float?             @default(5)
  price            Float
  tourTourCategory TourTourCategory[]
  tourCity         TourCity[]
  tourLanguage     TourLanguage[]
  durationHours    Int
  durationMinutes  Int

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tourReview TourReview[]
  tourImage  TourImage[]
  booking    Booking[]
}

model City {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name String

  /// @Validator.IsString()
  status Status @default(ACTIVE)

  country   Country    @relation(fields: [countryId], references: [id])
  countryId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tourCity  TourCity[]
}

model Currency {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name String

  /// @Validator.IsString()
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tour      Tour[]
}

model Country {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name String

  /// @Validator.IsString()
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  City      City[]
}

model TourCategory {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name   String
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tourTourCategory TourTourCategory[]
}

model TourReview {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name   String
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rate   Int
  review String

  tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model TourImage {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name   String
  status Status @default(ACTIVE)

  image     String
  sortOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?
}

model TourTourCategory {
  status Status @default(ACTIVE)
  tour   Tour?  @relation(fields: [tourId], references: [id])
  tourId Int

  tourCategory   TourCategory @relation(fields: [tourCategoryId], references: [id])
  tourCategoryId Int

  @@id([tourId, tourCategoryId])
}

model TourCity {
  status Status @default(ACTIVE)
  tour   Tour?  @relation(fields: [tourId], references: [id])
  tourId Int
  city   City   @relation(fields: [cityId], references: [id])
  cityId Int

  @@id([tourId, cityId])
}

model Language {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  name String

  /// @Validator.IsString()
  status Status @default(ACTIVE)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tourLanguage TourLanguage[]
  booking      Booking[]
}

model TourLanguage {
  status     Status   @default(ACTIVE)
  tour       Tour?    @relation(fields: [tourId], references: [id])
  tourId     Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([tourId, languageId])
}

model Booking {
  id Int @id @default(autoincrement())

  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  numberOfPeople Int?

  /// @Validator.IsString()
  status BookingStatus @default(PENDING)

  /// @Validator.IsString()
  userComment String?

  tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int

  date DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
